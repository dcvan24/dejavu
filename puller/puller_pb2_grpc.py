# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import puller.puller_pb2 as puller__pb2


class ImagePullerStub(object):
  """ImagePuller pulls the image following the specified order 
  of image pulls. It runs in front of a Docker daemon capable 
  of pulling images from a Docker registry v2 instance.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SetConfig = channel.unary_unary(
        '/dejavu.puller.ImagePuller/SetConfig',
        request_serializer=puller__pb2.Config.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.WarmUp = channel.unary_stream(
        '/dejavu.puller.ImagePuller/WarmUp',
        request_serializer=puller__pb2.WarmUpLoad.SerializeToString,
        response_deserializer=puller__pb2.PullerStatus.FromString,
        )
    self.Pull = channel.stream_stream(
        '/dejavu.puller.ImagePuller/Pull',
        request_serializer=puller__pb2.ImagePull.SerializeToString,
        response_deserializer=puller__pb2.ImagePullSummary.FromString,
        )
    self.Prune = channel.unary_unary(
        '/dejavu.puller.ImagePuller/Prune',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class ImagePullerServicer(object):
  """ImagePuller pulls the image following the specified order 
  of image pulls. It runs in front of a Docker daemon capable 
  of pulling images from a Docker registry v2 instance.
  """

  def SetConfig(self, request, context):
    """SetConfig configures the image puller as specified
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WarmUp(self, request, context):
    """WarmUp warms up the puller's cache with the input load.
    It yields the PullerStatus to inform the client of the 
    puller's current status
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Pull(self, request_iterator, context):
    """Pull starts the specified image pull and yields the ImagePullSummary 
    immediately after the pull finishes
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Prune(self, request, context):
    """Prune the Docker images on the puller
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImagePullerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SetConfig': grpc.unary_unary_rpc_method_handler(
          servicer.SetConfig,
          request_deserializer=puller__pb2.Config.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'WarmUp': grpc.unary_stream_rpc_method_handler(
          servicer.WarmUp,
          request_deserializer=puller__pb2.WarmUpLoad.FromString,
          response_serializer=puller__pb2.PullerStatus.SerializeToString,
      ),
      'Pull': grpc.stream_stream_rpc_method_handler(
          servicer.Pull,
          request_deserializer=puller__pb2.ImagePull.FromString,
          response_serializer=puller__pb2.ImagePullSummary.SerializeToString,
      ),
      'Prune': grpc.unary_unary_rpc_method_handler(
          servicer.Prune,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dejavu.puller.ImagePuller', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
