# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import puller.puller_pb2 as puller__pb2


class ImagePullerStub(object):
  """ImagePuller pulls the image following the specified order 
  of image pulls. It runs in front of a Docker daemon capable 
  of pulling images from a Docker registry v2 instance.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Pull = channel.unary_stream(
        '/dejavu.puller.ImagePuller/Pull',
        request_serializer=puller__pb2.ImagePullSequence.SerializeToString,
        response_deserializer=puller__pb2.ImagePullSummary.FromString,
        )


class ImagePullerServicer(object):
  """ImagePuller pulls the image following the specified order 
  of image pulls. It runs in front of a Docker daemon capable 
  of pulling images from a Docker registry v2 instance.
  """

  def Pull(self, request, context):
    """Pull starts the image pull in sequence.
    It yields the ImagePullSummary immediately after a image pull finishes
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImagePullerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Pull': grpc.unary_stream_rpc_method_handler(
          servicer.Pull,
          request_deserializer=puller__pb2.ImagePullSequence.FromString,
          response_serializer=puller__pb2.ImagePullSummary.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dejavu.puller.ImagePuller', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
